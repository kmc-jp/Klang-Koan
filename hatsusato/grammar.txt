# written by PEG (Parsing Expression Grammar)

# Terminal symbol
empty <- ""
singleline_comment <- "~~" (!"\n" .)*
multiline_comment <- "{~" .* "~}"
alphabet <- [a-zA-Z]
alphabet_or_bar <- "_" / alphabet
nonzero_digit <- [1-9]
decimal_digit <- [0-9]
natural_number <- nonzero_digit (decimal_digit / ("_" !"_"))*
decimal_integer <- ("0" ![0-9]) / ("~"? natural_number)
identifier <- alphabet_or_bar (alphabet_or_bar / decimal_digit)*
integer_literal <- decimal_integer
type <- "int"

# Nonterminal symbol
program <-
  function_definition+

function_definition <-
  "def" identifier "(" argument_list ")" "->" "(" type ")" compound_statement

argument_list <-
  (argument ("," argument)*) / empty

argument <-
  type identifier

compound_statement <-
  "{" statement* "}"

statement <-
  expression_statement /
  variable_definition_statement /
  if_statement /
  while_statement /
  for_statement /
  return_statement /
  break_statement /
  continue_statement

expression_statement <-
  expression? ";"

variable_definition_statement <-
  variable_definition ";"

if_statement <-
  "if" "(" expression ")" compound_statement
  (else_if_statement / else_statement)?

else_if_statement <-
  "else" "if" "(" expression ")" compound_statement
  (else_if_statement / else_statement)?

else_statement <-
  "else" compound_statement

while_statement <-
  "while" "(" expression ")" compound_statement

for_statement <-
  "for" "(" expression? ";" expression? ";" expression? ")"
  compound_statement

return_statement <-
  "return" expression ";"

break_statement <-
  "break" ";"

continue_statement <-
  "continue" ";"

variable_definition <-
  "def" "type" "var"? identifier (":=" expression)?

expression <-
  assign_expression

assign_expression <-
  or_expression
  ((":=" / ":+=" / ":-=" / ":*=" / ":/=" / ":%=") or_expression)?

or_expression <-
  and_expression ("or" and_expression)*

and_expression <-
  comparative_expression ("and" comparative_expression)*

comparative_expression <-
  additive_expression
  (("=" / "/=" / "<" / ">" / "<=" / ">=") additive_expression)?

additive_expression <-
  multiplicative_expression (("+" / "-") multiplicative_expression)*

multiplicative_expression <-
  unary_expression (("*" / "/" / "%") unary_expression)*

unary_expression <-
  (("not" / "~") unary_expression) / postfix_expression

postfix_expression <-
  function_call / primary_expression

function_call <-
  identifier "(" parameter_list ")"

parameter_list <-
  (parameter ("," parameter)*) / empty

parameter <-
  expression

primary_expression <-
  ("(" expression ")") / identifier / integer_literal
